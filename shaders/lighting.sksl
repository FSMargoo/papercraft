uniform float3 iResolution;
uniform float iTime;
uniform float4 iMouse;

float sphereSDF(vec2 p, float size) {
	return length(p) - size;
}

float boxSDF(vec2 p, vec2 size) {
	vec2 r = abs(p) - size;
    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));
}

void addObj(inout float dist, inout vec3 color, float d, vec3 c) {
    if (dist > d) {
        dist = d;
        color = c;
    }
}

void scene(in vec2 pos, out vec3 color, out float dist) {
    dist = 1e9; color = vec3(0,0,0);
    addObj(dist, color, boxSDF(pos - vec2(-4,1), vec2(1,1)), 	vec3(.6,.8,1.0));
    addObj(dist, color, sphereSDF(pos - vec2(4,1), 0.5), 		vec3(1, 0.9, 2.8));
    addObj(dist, color, sphereSDF(pos - vec2(2.4,2.4), 0.1), 		vec3(3, 0.9, 2.8));
    addObj(dist, color, boxSDF(pos - vec2(0,3.0*sin(iTime)), 	vec2(1.0, 3.5)), vec3(.4,.1,.1));
}

void trace(vec2 p, vec2 dir, out vec3 c) {
    for (int j = 0; j < 20; j++) {
        float d;
        scene(p, c, d);
        if (d < 1e-3) {
            //c = vec3(0,.1,0);
            return;
        }
        if (d > 1e1) break;
        p -= dir * d;
    }
    c = vec3(0,0,0);
}

float random (in vec2 _st) {
    return fract(sin(dot(_st.xy,
        vec2(12.9898,78.233)))*
        43758.5453123);
}


vec4 main( in vec2 fragCoord )
{
  	const int sample = 100;
  	vec4 fragColor;
    // Normalized pixel coordinates (from 0 to 1)
    vec2 texUv = fragCoord/iResolution.xy;
    vec2 uv = (fragCoord.xy-(iResolution.xy/2.0))/iResolution.y*10.0;

    vec3 col = vec3(0,0,0);
    for (int i = 0; i < sample; i++) {
        float t = (float(i) + random(uv+float(i))) / float(sample) * 2. * 3.1415;
        vec3 c;
        trace(uv, vec2(cos(t), sin(t)), c);
        col += c;
    }
    col /= float(sample);

    // Output to screen
    // vec4 tex = texture(iChannel0, texUv);
    fragColor = vec4(col*2.0,3.0);
  	return fragColor;
}